// Generated by CoffeeScript 1.3.3
(function() {

  Array.prototype.includes = function(item) {
    return this.indexOf(item) >= 0;
  };

  $.fn.concat = function(concat) {
    return this.val(this.val() + concat);
  };

  $.fn.replace = function(one, two) {
    var html;
    html = this.html();
    return this.html(html.replace(one, two));
  };

  $.fn.disable = function() {
    this.addClass('disabled');
    return this.each(function() {
      var el;
      el = $(this);
      if (el.is(":input")) {
        return el.attr('disabled', 'disabled');
      } else {
        return el.find(':input').disable().end();
      }
    });
  };

  $.fn.enable = function() {
    this.removeClass('disabled');
    return this.each(function() {
      var el;
      el = $(this);
      if (el.is(":input")) {
        return el.removeAttr('disabled');
      } else {
        return el.find(':input').enable().end();
      }
    });
  };

  $.fn.href = function(value) {
    if (value) {
      return this.attr('href', value);
    } else {
      return this.attr('href');
    }
  };

  $.fn.check = function() {
    return this.attr('checked', 'checked');
  };

  $.fn.uncheck = function() {
    return this.attr('checked', false);
  };

  $.fn.is_checked = function() {
    if (this.is(':input')) {
      return this.is(':checked');
    } else if (this.is('label[for]')) {
      return $("#" + (this.attr('for'))).is_checked();
    } else {
      throw 'not an input';
    }
  };

  window.mobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent);

}).call(this);
