// Generated by CoffeeScript 1.3.3
(function() {
  var Highlight, highlightNewMessages;

  window.bayes = new classifier.Bayesian();

  if (this['classifier_info']) {
    bayes.fromJSON(classifier_info);
  }

  Highlight = (function() {

    function Highlight() {}

    Highlight.prototype.highlighted_text = function() {
      var text;
      text = $('<div/>').html(this.data('original_html').replace(/<br>/g, 'REPLACEMENT_LINEBREAK')).text();
      text = hljs.highlightAuto(text).value.replace(/REPLACEMENT_LINEBREAK/g, '<br>');
      return "<pre style='overflow-x: auto;'><code>" + text + "</code></pre>";
    };

    Highlight.prototype.baysian_data = function() {
      return this.text().split(' ');
    };

    Highlight.prototype.setDisplay = function(category) {
      var original_html;
      if (category === 'text') {
        original_html = this.data('original_html');
        original_html = original_html.replace(/`(.+?)`/g, function(match, text, urlId) {
          return " <pre style='overflow-x: auto; display: inline-block;'><code>" + text + "</code></pre> ";
        });
        this.html(original_html);
      } else if (category === 'code') {
        this.html(this.highlighted_text());
      }
      return this.add_hud();
    };

    Highlight.prototype.setCategory = function(category) {
      this.setDisplay(category);
      bayes.train(this.baysian_data(), category);
      if (GTalkSyntax.host) {
        console.log('training', GTalkSyntax.url('/classifiers/1/train'));
        return $.post(GTalkSyntax.url('/classifiers/1/train'), {
          cat: category,
          doc: this.baysian_data()
        });
      }
    };

    Highlight.prototype.guess = function() {
      var original_text;
      original_text = this.text();
      if (original_text.indexOf('`') !== -1) {
        return this.setDisplay(bayes.classify('text'));
      } else {
        return this.setDisplay(bayes.classify(original_text));
      }
    };

    Highlight.prototype.add_hud = function() {
      var _this = this;
      this.append("<div class='GTalkSyntax-HUD'><span class='GTalkSyntax-text'>text</span> | <span class='GTalkSyntax-code'>code</span></div>");
      this.find(".GTalkSyntax-code").click(function() {
        return _this.setCategory('code');
      });
      return this.find(".GTalkSyntax-text").click(function() {
        return _this.setCategory('text');
      });
    };

    return Highlight;

  })();

  $.fn.highlight = function() {
    return this.each(function(index, element) {
      var key, value, _ref;
      element = $(element);
      _ref = Highlight.prototype;
      for (key in _ref) {
        value = _ref[key];
        element[key] = value;
      }
      return element.css({
        position: 'relative'
      }).data({
        original_html: element.html()
      }).guess();
    });
  };

  highlightNewMessages = function() {
    $('[role=log] .kl').filter(function() {
      return $(this).find('.GTalkSyntax-HUD').length < 1;
    }).highlight();
    return setTimeout(highlightNewMessages, 200);
  };

  setTimeout(highlightNewMessages, 1000);

  console.log('loaded highlight 3');

}).call(this);
